{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Invalid Username or Password: a useless security measure\",\n  \"date\": \"2014-12-07T00:00:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://kev.inburke.com/kevin/invalid-username-or-password-useless/\"\n  }), \"Kevin Burke on his blog\"), \":\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If you tell an attacker the email address is wrong, they\\u2019ll try a different one. If you tell them the password is wrong, then an attacker knows that the username is correct, and can go on to try a bunch of passwords for that username until they hit the right one. So sites won\\u2019t tell you which one is wrong, to try and avoid the information disclosure.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Unfortunately \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"this assumes that there\\u2019s no other way for an attacker to discover whether a username/email address is registered for a service.\"), \" This assumption is incorrect.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"99.9% of websites on the Internet will only let you create one account for each email address. So if you want to see if an email address has an account, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"try signing up for a new account with the same email address\"), \".\")), mdx(\"p\", null, \"I\\u2019ve personally always hated this. Shouldn\\u2019t we try to communicate as clearly as possible to our users? Most people have multiple email addresses and it\\u2019s easy to forget which one you use for which service. If it doesn\\u2019t really make things more secure then I don\\u2019t see why anyone should continue doing this.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"pretitle":null,"title":"Invalid Username or Password: a useless security measure","date":"07.12.14"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/2014-12-07-invalid-username-or-password-a-useless-security-measure/"}}